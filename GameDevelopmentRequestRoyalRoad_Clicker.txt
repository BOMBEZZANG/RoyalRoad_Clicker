GameDevelopmentRequest:RoyalRoad_Clicker

**Document Version:** 1.0
**Date:** August 5, 2025
**Prepared For:** Lead Unity Engineer / Development Team

### **1. Overview**

  * **Game Title (WT):** *Project RoyalRoad_Clicker* 
  * **Genre:** Narrative-driven Idle Clicker RPG
  * **Platform:** Mobile (Portrait/Vertical View)
  * **Engine:** Unity
  * **Core Concept:** *Project RoyalRoad_Clicker* is a unique idle clicker that places the player in the shoes of a slave (`Nobi`) in a setting inspired by Joseon-era Korea. Driven by the hope offered by a real historical policy, the "Napsokchaek," the player will rise through the rigid class system—not just by accumulating wealth, but by earning honor—to ultimately become the king.

### **2. Core Concept & Vision**

The key differentiator for this project is its deep narrative hook and thematic depth. Unlike typical "get rich" clickers, the core progression is based on **social ascension**. The player's journey is a struggle for legitimacy and freedom, which provides a powerful emotional core.

  * **The "Napsokchaek" Hook:** The game begins with the player character learning about the "Napsokchaek" policy, a state-sanctioned path for commoners and even slaves to gain status by donating grain (`Rice`) to the state. This provides a clear, diegetic motivation for the core gameplay loop.
  * **Beyond Wealth:** The ultimate goal is not just to be rich, but to be honorable. This is represented by our dual-resource economy, where wealth (`Rice`) is a tool used to generate `Honor`, the true key to rising in status.

### **3. Core Gameplay Loop**

The game's economic engine is a self-reinforcing loop designed for maximum player satisfaction and long-term engagement.

1.  **TAP:** The player taps the screen to perform a core action, which generates the primary resource: `[Rice]`.
2.  **SPEND [Rice]:** The player makes a strategic choice:
      * **A) Re-invest in Production:** Spend `[Rice]` on upgrades (better tools, automation) to increase the rate of `[Rice]` generation.
      * **B) Convert to Honor:** Spend `[Rice]` on specific buildings or activities (e.g., "Host a Banquet," "Fund the Scholars") that generate the secondary resource: `[Honor]`.
3.  **GAIN [Honor]:** `[Honor]` is accumulated, primarily through automated facilities purchased with `[Rice]`.
4.  **ASCEND CLASS:** Once enough `[Honor]` is accumulated, the player can spend it to ascend to the next social class (e.g., from Tenant Farmer to Noble).
5.  **UNLOCK:** Ascending unlocks new, more powerful upgrades, new Honor-generating activities, and new visual content, feeding back into the loop.

### **4. Key Systems & Mechanics**

#### **4.1. Dual Resource Economy**

  * **`[Rice]` (쌀):** The primary, fundamental resource. Generated by player taps and automation. It is the fuel for *all* actions and purchases in the game.
  * **`[Honor]` (명예):** The secondary, "gatekeeping" resource. It cannot be generated by tapping directly. It is the currency for **Class Ascension only**, making it the player's ultimate strategic objective.

#### **4.2. Class Ascension System**

This is the primary progression vector. Each class is a major milestone that provides significant visual and mechanical rewards.
**Path:** `Slave (노비)` → `Tenant Farmer (소작농)` → `Commoner (평민)` → `Noble (양반)` → `Lord (영주)` → `King (왕)`.

#### **4.3. Early Game: The "Slave" Stage Mechanic**

To enhance the narrative, the initial stage is mechanically unique.

  * **Concept:** The player must "secretly hide" rice to avoid the master's gaze.
  * **Gameplay:** Instead of constant rewards, tapping is only effective during random, short "Windows of Opportunity" (e.g., "The guard is asleep\!"). This makes the first class ascension feel like a tense, hard-won escape rather than a simple grind.

### **5. Visual Progression & Art Concept ("Siggakppong")**

Visual satisfaction is paramount. Growth will be shown through a consistent evolution of the character and their environment.

  * **Art Style:** A 2D cartoon or illustrative style that emphasizes Korean historical aesthetics.
  * **Character:** Evolves from wearing dirty rags (`Slave`) to simple robes (`Commoner`), to ornate silk robes (`Noble`), and finally to the royal dragon robe (`King`).
  * **Environment:** The background transforms from a muddy field and a straw hut, to vast golden rice paddies and a tiled-roof house (`Giwa-jip`), and ultimately to a royal palace.
  * **Scale & "Koku" (석고):** As the player becomes a lord, their power will be measured in `Koku` (a historical measure of rice production). The view may zoom out to a map of the nation, where the player's territory visually expands, providing a powerful sense of conquest and scale.

### **6. UI/UX Design Philosophy**

The UI will be designed for a vertical mobile screen, emphasizing clarity and one-handed usability.

  * **3-Part Layout:**
    1.  **Top HUD:** Displays key stats (`Rice`, `Honor`, `Koku`, `Class Title`).
    2.  **Middle "Visual Stage":** A large, uncluttered area showcasing the character and background. **This entire area serves as the primary tap zone for maximum immersion.**
    3.  **Bottom "Interaction Zone":** A thumb-friendly tabbed navigation system for all player actions:
          * **`Upgrade` Tab:** For spending `[Rice]` to increase `[Rice]` production.
          * **`Honor` Tab:** For spending `[Rice]` to build `[Honor]`-generating facilities.
          * **`Class` Tab:** For viewing the progression tree and spending `[Honor]` to ascend.
          * **`Shop` Tab:** For IAP and rewarded ads.

### **7. Proposed Technical Architecture (Unity)**

To ensure a scalable, maintainable, and efficient codebase, we will adopt the following architectural principles.

  * **Primary Patterns:** An **MVP (Model-View-Presenter)-inspired** approach will be used to separate data, visuals, and logic. A **Singleton pattern** will be used for global managers.
  * **Event-Driven Communication:** Systems will be highly decoupled using a central **`EventManager`** (Publisher/Subscriber model). This prevents direct, hard-coded references between systems.
      * *Example:* The `ResourceManager` will fire an `OnRiceAmountChanged` event. The `ResourceUIView` will subscribe to this event and update the display accordingly, without either system knowing about the other's existence.
  * **Centralized Managers (Core Systems):**
      * **`GameManager`:** Manages overall game state (paused, running, etc.).
      * **`ResourceManager`:** Manages all currency transactions for `[Rice]`, `[Honor]`, and any other resources. This is the single source of truth for the game's economy.
      * **`EventManager`:** Handles the global event bus.
      * **`SaveManager`:** Manages serialization and deserialization of game data.
  * **Unified Player Object:** Critically, there will be **one `Player` entity** (`PlayerModel`, `PlayerPresenter`, `PlayerView`). Class progression will be handled by changing a state variable (e.g., `playerModel.currentClass`) within the `PlayerModel`. The `PlayerView` will then update the character's visual appearance based on this state. **We will NOT create separate scripts for each class**, as this would lead to massive code duplication.
  * **Data Management:** Game data (e.g., class requirements, upgrade costs, item stats) should be managed using **`ScriptableObjects`** for easy balancing and modification by designers without touching code.
  * **Proposed Folder Structure:** We will adopt a "feature-first" or "vertical slice" approach to keep related scripts together for easier maintenance.

<!-- end list -->

```
/Assets/Scripts/
├── /Core/ (Singleton Managers: GameManager, ResourceManager, etc.)
├── /Data/ (ScriptableObjects and data classes)
├── /Gameplay/
│   ├── /Player/ (PlayerPresenter, PlayerModel, PlayerStatus)
│   └── /Interaction/ (TapController, etc.)
└── /UI/
    ├── /Views/ (MonoBehaviour scripts that display data: PlayerView, ResourceUIView)
    └── /Presenters/ (UI-specific logic: UIPresenter for button events, etc.)
```

This architecture provides a robust and scalable foundation for all the features outlined in this document.